<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on MongoDB Java Driver</title>
    <link>/mongo-java-driver/3.0/tutorial/</link>
    <description>Recent content in Tutorials on MongoDB Java Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Mar 2015 15:36:56 +0000</lastBuildDate>
    <atom:link href="/mongo-java-driver/3.0/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Admin Operations</title>
      <link>/mongo-java-driver/3.0/tutorial/admin-operations/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/tutorial/admin-operations/</guid>
      <description>

&lt;h1 id=&#34;admin-introduction:8e617e003072f3a207d77f44b5ddc8e8&#34;&gt;Admin Introduction&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>CRUD Operations</title>
      <link>/mongo-java-driver/3.0/tutorial/crud-operations/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/tutorial/crud-operations/</guid>
      <description>

&lt;h1 id=&#34;getting-started:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting Started&lt;/h1&gt;

&lt;h2 id=&#34;introduction:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This page is a brief overview of working with the 3.0 MongoDB Java
Driver.&lt;/p&gt;

&lt;p&gt;For more information about the Java API, please refer to the &lt;a href=&#34;http://api.mongodb.org/java/3.0/index.html&#34;&gt;online API
Documentation for 3.0 Java Driver&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;a-quick-tour:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;A Quick Tour&lt;/h1&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/tree/master#binaries&#34;&gt;Binaries section of the
README&lt;/a&gt;
for instructions on how to include the driver in your project.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The following code snippets come from the QuickTour.java example code that can
be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/3.0.x/driver/src/examples/tour/QuickTour.java&#34;&gt;driver source&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;making-a-connection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Making a Connection&lt;/h3&gt;

&lt;p&gt;To make a connection to a MongoDB, you need to have at the minimum, the
name of a database to connect to. The database doesn&amp;rsquo;t have to exist -if
it doesn&amp;rsquo;t, MongoDB will create it for you.&lt;/p&gt;

&lt;p&gt;Additionally, you can specify the server address and port when
connecting. The following example shows three ways to connect to the
database &lt;code&gt;mydb&lt;/code&gt; on the local machine :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// To directly connect to a single MongoDB server (note that this will not auto-discover the primary even
// if it&#39;s a member of a replica set:
MongoClient mongoClient = new MongoClient();
// or
MongoClient mongoClient = new MongoClient( &amp;quot;localhost&amp;quot; );
// or
MongoClient mongoClient = new MongoClient( &amp;quot;localhost&amp;quot; , 27017 );
// or, to connect to a replica set, with auto-discovery of the primary, supply a seed list of members
MongoClient mongoClient = new MongoClient(Arrays.asList(new ServerAddress(&amp;quot;localhost&amp;quot;, 27017),
                                      new ServerAddress(&amp;quot;localhost&amp;quot;, 27018),
                                      new ServerAddress(&amp;quot;localhost&amp;quot;, 27019)));
// or use a connection string
MongoClient mongoClient = new MongoClient(new MongoClientURI(&amp;quot;mongodb://localhost:27017,localhost:27018,localhost:27019&amp;quot;));

MongoDatabase database = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the &lt;code&gt;database&lt;/code&gt; object will be a connection to a MongoDB
server for the specified database. With it, you can do further
operations.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;MongoClient&lt;/code&gt; instance actually represents a pool of connections to the database; you will only need one instance of class &lt;code&gt;MongoClient&lt;/code&gt; even with multiple threads. See the concurrency &amp;lt;java-driver-concurrency&amp;gt; doc page for more information.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;MongoClient&lt;/code&gt; class is designed to be thread safe and shared among
threads. Typically you create only 1 instance for a given database
cluster and use it across your application. If for some reason you
decide to create many &lt;code&gt;MongoClient&lt;/code&gt; instances, note that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all resource usage limits (max connections, etc) apply per
&lt;code&gt;MongoClient&lt;/code&gt; instance&lt;/li&gt;
&lt;li&gt;to dispose of an instance, make sure you call &lt;code&gt;MongoClient.close()&lt;/code&gt;
to clean up resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting a Collection&lt;/h3&gt;

&lt;p&gt;To get a collection to use, just specify the name of the collection to
the &lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/client/MongoDatabase.html#getCollection-java.lang.String-&#34;&gt;getCollection(String
collectionName)&lt;/a&gt;
method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have this collection object, you can now do things like insert
data, query for data, etc.&lt;/p&gt;

&lt;h3 id=&#34;inserting-a-document:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Inserting a Document&lt;/h3&gt;

&lt;p&gt;Once you have the collection object, you can insert documents into the
collection. For example, lets make a little document that in JSON would
be represented as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode javascript&#34;&gt;{
   &amp;quot;name&amp;quot; : &amp;quot;MongoDB&amp;quot;,
   &amp;quot;type&amp;quot; : &amp;quot;database&amp;quot;,
   &amp;quot;count&amp;quot; : 1,
   &amp;quot;info&amp;quot; : {
               x : 203,
               y : 102
             }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the above has an &amp;ldquo;inner&amp;rdquo; document embedded within it. To do
this, we can use the
&lt;a href=&#34;http://api.mongodb.org/java/3.0/org/bson/Document.html&#34;&gt;Document&lt;/a&gt; class
to create the document (including the inner document), and then just
simply insert it into the collection using the &lt;code&gt;insertOne()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document doc = new Document(&amp;quot;name&amp;quot;, &amp;quot;MongoDB&amp;quot;)
               .append(&amp;quot;type&amp;quot;, &amp;quot;database&amp;quot;)
               .append(&amp;quot;count&amp;quot;, 1)
               .append(&amp;quot;info&amp;quot;, new Document(&amp;quot;x&amp;quot;, 203).append(&amp;quot;y&amp;quot;, 102));
collection.insertOne(doc);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finding-the-first-document-in-a-collection-using-find:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Finding the First Document in a Collection Using &lt;code&gt;find()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To show that the document we inserted in the previous step is there, we
can do a simple
&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/client/MongoCollection.html#find--&#34;&gt;find()&lt;/a&gt;
operation followed by a call to
&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/client/MongoIterable.html#first--&#34;&gt;first()&lt;/a&gt;
to get the first document in the collection. This method returns a
single document, and it&amp;rsquo;s useful for queries which should only match a
single document, or you are only interested in the first. You don&amp;rsquo;t have
to deal with the cursor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document myDoc = collection.find().first();
System.out.println(myDoc);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you should see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document{{_id=54b5594843bb7b25f1c9da72, name=MongoDB, type=database, count=1, info=Document{{x=203, y=102}}}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; element has been added automatically by MongoDB to your
document. Remember, MongoDB reserves element names that start with
&amp;ldquo;_&amp;rdquo; and &amp;ldquo;\$&amp;rdquo; for internal use.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;adding-multiple-documents:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Adding Multiple Documents&lt;/h3&gt;

&lt;p&gt;In order to do more interesting things with queries, let&amp;rsquo;s add multiple
simple documents to the collection. These documents will just be&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
   &amp;quot;i&amp;quot; : value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and we can do this fairly efficiently in a loop&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Document&amp;gt; documents = new ArrayList&amp;lt;Document&amp;gt;();
for (int i = 0; i &amp;lt; 100; i++) {
    documents.add(new Document(&amp;quot;i&amp;quot;, i));
}
collection.insertMany(documents);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;counting-documents-in-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Counting Documents in A Collection&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve inserted 101 documents (the 100 we did in the loop, plus
the first one), we can check to see if we have them all using the
&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/client/MongoCollection.html#count--&#34;&gt;count()&lt;/a&gt;
method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;System.out.println(collection.count());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it should print &lt;code&gt;101&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;using-a-cursor-to-get-all-the-documents:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Using a Cursor to Get All the Documents&lt;/h3&gt;

&lt;p&gt;In order to get all the documents in the collection, we will use the
&lt;code&gt;find()&lt;/code&gt; method. The &lt;code&gt;find()&lt;/code&gt; method returns a &lt;code&gt;MongoIterable&lt;/code&gt; instance
which allows us to iterate over the set of documents that matched our
query. So to query all of the documents and print them out :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCursor&amp;lt;Document&amp;gt; cursor = collection.find().iterator();
try {
    while (cursor.hasNext()) {
        System.out.println(cursor.next());
    }
} finally {
    cursor.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that should print all 101 documents in the collection.&lt;/p&gt;

&lt;p&gt;Note that while this idiom is permissible:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (Document cur : collection.find()) {
    System.out.println(cur);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;its use is discouraged as the application can leak a cursor if the loop
terminates early.&lt;/p&gt;

&lt;h3 id=&#34;getting-a-single-document-with-a-query-filter:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting A Single Document with A Query Filter&lt;/h3&gt;

&lt;p&gt;We can create a filter to pass to the find() method to get a subset of
the documents in our collection. For example, if we wanted to find the
document for which the value of the &amp;ldquo;i&amp;rdquo; field is 71, we would do the
following ;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;myDoc = collection.find(eq(&amp;quot;i&amp;quot;, 71)).first();
System.out.println(myDoc);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it should just print just one document&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Document{{_id=54b5629643bb7b2a52e19ea3, i=71}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this usage relies on a static import of the Filters.eq method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static com.mongodb.client.model.Filters.*;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-a-set-of-documents-with-a-query:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting A Set of Documents With a Query&lt;/h3&gt;

&lt;p&gt;We can use the query to get a set of documents from our collection. For
example, if we wanted to get all documents where &lt;code&gt;&amp;quot;i&amp;quot; &amp;gt; 50&lt;/code&gt;, we could
write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// now use a range query to get a larger subset
cursor = collection.find(gt(&amp;quot;i&amp;quot;, 50)).iterator();

try {
    while (cursor.hasNext()) {
        System.out.println(cursor.next());
    }
} finally {
    cursor.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which should print the documents where &lt;code&gt;i &amp;gt; 50&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could also get a range, say &lt;code&gt;50 &amp;lt; i &amp;lt;= 100&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;cursor = collection.find(and(gt(&amp;quot;i&amp;quot;, 50), lte(&amp;quot;i&amp;quot;, 100))).iterator();

try {
    while (cursor.hasNext()) {
        System.out.println(cursor.next());
    }
} finally {
    cursor.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;maxtime:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;MaxTime&lt;/h3&gt;

&lt;p&gt;MongoDB 2.6 introduced the ability to timeout individual queries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().maxTime(1, TimeUnit.SECONDS).first();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above the maxTime is set to one second and the query will
be aborted after the full second is up.&lt;/p&gt;

&lt;h3 id=&#34;bulk-operations:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Bulk operations&lt;/h3&gt;

&lt;p&gt;Under the covers MongoDB is moving away from the combination of a write
operation followed by get last error (GLE) and towards a write commands
API. These new commands allow for the execution of bulk
insert/update/delete operations. There are two types of bulk operations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ordered bulk operations.&lt;/p&gt;

&lt;p&gt;:   Executes all the operation in order and error out on the first
    write error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unordered bulk operations.&lt;/p&gt;

&lt;p&gt;:   These operations execute all the operations in parallel and
    aggregates up all the errors. Unordered bulk operations do not
    guarantee order of execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s look at two simple examples using ordered and unordered
operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 2. Ordered bulk operation - order is guarenteed
collection.bulkWrite(Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                                   new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                                   new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                                   new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                                        new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                                   new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                                   new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                                         new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))));


 // 2. Unordered bulk operation - no guarantee of order of operation
collection.bulkWrite(Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                                   new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                                   new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                                   new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                                        new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                                   new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                                   new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                                         new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4)))),
                     new BulkWriteOptions().ordered(false));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;For servers older than 2.6 the API will down convert the operations,
and support the correct semantics for BulkWriteResult and
BulkWriteException each write operation has to be done one at a time.
It&amp;rsquo;s not possible to down convert 100% so there might be slight edge
cases where it cannot correctly report the right numbers.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;quick-tour-of-the-administrative-functions:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Quick Tour of the Administrative Functions&lt;/h2&gt;

&lt;h3 id=&#34;getting-a-list-of-databases:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting A List of Databases&lt;/h3&gt;

&lt;p&gt;You can get a list of the available databases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (String name: mongoClient.listDatabaseNames()) {
    System.out.println(name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling the &lt;code&gt;getDatabase()&lt;/code&gt; on &lt;code&gt;MongoClient&lt;/code&gt; does not create a database.
Only when a database is written to will a database be created. Examples
would be creating an index or collection or inserting a document into a
collection.&lt;/p&gt;

&lt;h3 id=&#34;dropping-a-database:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Dropping A Database&lt;/h3&gt;

&lt;p&gt;You can drop a database by name using a &lt;code&gt;MongoClient&lt;/code&gt; instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mongoClient.dropDatabase(&amp;quot;databaseToBeDropped&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Creating A Collection&lt;/h3&gt;

&lt;p&gt;There are two ways to create a collection. Inserting a document will
create the collection if it doesn&amp;rsquo;t exist or calling the
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/db.createCollection&#34;&gt;createCollection&lt;/a&gt;
command.&lt;/p&gt;

&lt;p&gt;An example of creating a capped collection_ sized to 1 megabyte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.createCollection(&amp;quot;cappedCollection&amp;quot;, new CreateCollectionOptions().capped(true).sizeInBytes(0x100000));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-a-list-of-collections:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting A List of Collections&lt;/h3&gt;

&lt;p&gt;You can get a list of the available collections in a database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (String name : database.listCollectionNames()) {
    System.out.println(name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dropping-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Dropping A Collection&lt;/h3&gt;

&lt;p&gt;You can drop a collection by using the drop() method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.dropCollection();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should notice that the collection no longer exists.&lt;/p&gt;

&lt;h3 id=&#34;creating-an-index:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Creating An Index&lt;/h3&gt;

&lt;p&gt;MongoDB supports indexes, and they are very easy to add on a collection.
To create an index, you just specify the field that should be indexed,
and specify if you want the index to be ascending (&lt;code&gt;1&lt;/code&gt;) or descending
(&lt;code&gt;-1&lt;/code&gt;). The following creates an ascending index on the &lt;code&gt;i&lt;/code&gt; field :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create an ascending index on the &amp;quot;i&amp;quot; field
 collection.createIndex(new Document(&amp;quot;i&amp;quot;, 1));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-a-list-of-indexes-on-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting a List of Indexes on a Collection&lt;/h3&gt;

&lt;p&gt;You can get a list of the indexes on a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (final Document index : collection.listIndexes()) {
    System.out.println(index);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you should see something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Document{{v=1, key=Document{{_id=1}}, name=_id_, ns=mydb.test}}
Document{{v=1, key=Document{{i=1}}, name=i_1, ns=mydb.test}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;text-indexes:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Text indexes&lt;/h3&gt;

&lt;p&gt;MongoDB also provides text indexes to support text search of string
content. Text indexes can include any field whose value is a string or
an array of string elements. To create a text index specify the string
literal &amp;ldquo;text&amp;rdquo; in the index document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create a text index on the &amp;quot;content&amp;quot; field
coll.createIndex(new BasicDBObject(&amp;quot;content&amp;quot;, &amp;quot;text&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As of MongoDB 2.6 text indexes are now integrated into the main query
language and enabled by default:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Insert some documents
collection.insertOne(new Document(&amp;quot;_id&amp;quot;, 0).append(&amp;quot;content&amp;quot;, &amp;quot;textual content&amp;quot;));
collection.insertOne(new Document(&amp;quot;_id&amp;quot;, 1).append(&amp;quot;content&amp;quot;, &amp;quot;additional content&amp;quot;));
collection.insertOne(new Document(&amp;quot;_id&amp;quot;, 2).append(&amp;quot;content&amp;quot;, &amp;quot;irrelevant content&amp;quot;));

// Find using the text index
Document search = new Document(&amp;quot;$search&amp;quot;, &amp;quot;textual content -irrelevant&amp;quot;);
Document textSearch = new Document(&amp;quot;$text&amp;quot;, search);
long matchCount = collection.count(textSearch);
System.out.println(&amp;quot;Text search matches: &amp;quot;+ matchCount);

// Find using the $language operator
textSearch = new Document(&amp;quot;$text&amp;quot;, search.append(&amp;quot;$language&amp;quot;, &amp;quot;english&amp;quot;));
matchCount = collection.count(textSearch);
System.out.println(&amp;quot;Text search matches (english): &amp;quot;+ matchCount);

// Find the highest scoring match
Document projection = new Document(&amp;quot;score&amp;quot;, new Document(&amp;quot;$meta&amp;quot;, &amp;quot;textScore&amp;quot;));
myDoc = collection.find(textSearch).projection(projection).first();
System.out.println(&amp;quot;Highest scoring document: &amp;quot;+ myDoc);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it should print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Text search matches: 2
Text search matches (english): 2
Highest scoring document: Document{{_id=1, content=additional content, score=0.75}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about text search see the
text index &amp;lt;/core/index-text&amp;gt; and
\$text query operator &amp;lt;/reference/operator/query/text&amp;gt; documentation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-java-driver/3.0/tutorial/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/tutorial/</guid>
      <description>

&lt;h2 id=&#34;getting-started:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To help you get started quickly on the new driver follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.0/mongo-java-driver/3.0/tutorial/installation-guide/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.0/mongo-java-driver/3.0/tutorial/crud-operations/&#34;&gt;CRUD Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.0/mongo-java-driver/3.0/tutorial/admin-operations/&#34;&gt;Admin Operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>/mongo-java-driver/3.0/tutorial/installation-guide/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/tutorial/installation-guide/</guid>
      <description>

&lt;h1 id=&#34;installation:9d4f5debee078ff2736b8039cc26277c&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;How to install the driver&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>